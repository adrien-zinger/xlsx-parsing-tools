{"version":3,"sources":["../../src/parse-xlsx/index.js"],"names":["graps","worksheet","map","letter_start","letter_end","num_start","num_end","ret","serie","letter","col","num","push","xlsxMdPrint","table","cb","replaceLineJump","str","split","c","join","height","length","width","out","i","next","value","x","y","removeEmpties","lines_to_remove","column_to_remove","rm","splice","l","xlsxParser","path","config","undefined","default_config","Promise","res","workbook","XLSX","readFile","sheetignore","limits","SheetNames","name","indexOf","Sheets","lims","cell","v","sheetpage","data"],"mappings":"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","sourcesContent":["import XLSX from \"xlsx\"\nimport { getAlphabetSerie } from \"./alphabet.js\"\n\nimport default_config from \"./config.js\"\n\n/**\n *\n * @param {XLSX.WorkSheet} worksheet\n * @param {*} letter_lim\n * @param {*} num_lim\n * @param {*} filter\n * @returns\n */\nfunction graps(worksheet, [letter_start, letter_end, num_start, num_end], map) {\n  const ret = []\n  const serie = getAlphabetSerie(letter_start)\n  for (const letter of serie) {\n    const col = []\n    for (let num = num_start; num <= num_end; ++num) {\n      col.push(map(worksheet[`${letter}${num}`], `${letter}${num}`))\n      if (num_end === num) break\n    }\n    ret.push(col)\n    if (letter_end === letter) return ret\n  }\n}\n\nfunction xlsxMdPrint(table, cb) {\n  function replaceLineJump(str) {\n    return str\n      .split(\"\")\n      .map((c) => {\n        if (c === \"\\n\") return \"\\\\n\"\n        if (c === \"\\r\") return \"\"\n        if (c === \"\\t\") return \"\"\n        return c\n      })\n      .join(\"\")\n  }\n  const height = table[0].length\n  const width = table.length\n  let out = \"|\"\n  const serie = getAlphabetSerie()\n  for (let i = 0; i < width; ++i) out += ` ${serie.next().value} |`\n  out += \"\\n|\"\n  for (let i = 0; i < width; ++i) out += \" ------ |\"\n  for (let x = 0; x < height; ++x) {\n    out += \"\\n|\"\n    for (let y = 0; y < width; ++y) out += ` ${replaceLineJump(table[y][x])} |`\n  }\n  cb((out += \"\\n\"))\n}\n\nfunction removeEmpties(table) {\n  const height = table[0].length\n  const width = table.length\n  const lines_to_remove = []\n  const column_to_remove = []\n  for (let x = 0; x < height; ++x) {\n    let rm = true\n    for (let y = 0; y < width; ++y) {\n      if (table[y][x] != \"\") {\n        rm = false\n        break\n      }\n    }\n    if (rm) lines_to_remove.push(x)\n  }\n  for (let y = 0; y < width; ++y) {\n    let rm = true\n    for (let x = 0; x < height; ++x) {\n      if (table[y][x] != \"\") {\n        rm = false\n        continue\n      }\n    }\n    if (rm) column_to_remove.push(y)\n  }\n  for (const c of column_to_remove) table.splice(c, 1)\n  for (const l of lines_to_remove) for (let c of table) c.splice(l, 1)\n  return table\n}\n\n/**\n *\n * @param {*} config\n * @returns {Promise}\n */\nfunction xlsxParser(path, config = undefined) {\n  if (config === undefined) config = default_config\n  return new Promise((res) => {\n    let ret = []\n    const workbook = XLSX.readFile(path)\n    const { sheetignore, limits } = config\n    for (const name of workbook.SheetNames) {\n      if (sheetignore.length > 0 && sheetignore.indexOf(name) >= 0) continue\n      var worksheet = workbook.Sheets[name]\n      const lims = limits[name] !== undefined ? limits[name] : limits[\"default\"]\n      const table = graps(worksheet, lims, (cell) => {\n        return cell === undefined ? \"\" : cell.v\n      })\n      ret.push({\n        sheetpage: name,\n        data: removeEmpties(table),\n      })\n    }\n    res(ret)\n  })\n}\n\nexport { xlsxParser, xlsxMdPrint }\n"],"file":"index.js"}